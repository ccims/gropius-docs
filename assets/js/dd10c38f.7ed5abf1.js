"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57500],{429795:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>v,contentTitle:()=>f,default:()=>S,frontMatter:()=>u,metadata:()=>b,toc:()=>k});var a=i(487462),s=(i(667294),i(603905)),n=i(258219),r=(i(162316),i(580667)),o=i.n(r),p=i(524228),c=i.n(p),l=i(909487),d=i(241429),y=i(905397),g=i(504667),m=i(809472),h=i(685162);const u={id:"strategies-controller-get-strategy-type-9",title:"Get one strategy (type)",description:"Gets details for the one specified strategy type",sidebar_label:"Get one strategy (type)",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"StrategiesController_getStrategyType_9",description:"Gets details for the one specified strategy type",parameters:[{name:"type",required:!0,in:"path",description:"The strategy type name of the strategy to retrieve",schema:{type:"string"}}],responses:{200:{description:"If existing, the strategy specified",content:{"application/json":{schema:{type:"object",properties:{typeName:{type:"string",description:"The unique (type) name of the strategy",example:"userpass"},canLoginRegister:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability of logging in users",example:!0},canSync:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability\nof providing api tokens to the a sync service",example:!1},needsRedirectFlow:{type:"boolean",description:"`true` if to authenticate using this strategy, a redirect of the users browser is required\n\n`false` if sending credentials to the token endpoint is enough",example:!1},allowsImplicitSignup:{type:"boolean",description:"`true` iff this strategy allows instances to use implicit signup\nto register users automatically if they don't have an account but tried to login",example:!1},acceptsVariables:{description:"The specification of the data expected in the post body if not using redirect\nand sending the credentials directly to the token endpoint",type:"array",items:{type:"object"}},updateActions:{description:"The actions that can be performed on the strategy instance",type:"array",items:{type:"object"}},instanceConfigSchema:{type:"object",description:"The schema of the instance configuration"}},required:["typeName","canLoginRegister","canSync","needsRedirectFlow","allowsImplicitSignup","acceptsVariables","updateActions","instanceConfigSchema"],title:"GetStrategyResponse"}}}},404:{description:"If no strategy with the specified type name exists"}},tags:["login-api"],method:"get",path:"/auth/api/login/strategy/{type}",servers:[],securitySchemes:{oauth2:{type:"oauth2",flows:{},description:"Access token provided by running the oauth flow (and if needed) registering/linking",bearerFormat:"JWT"},bearer:{scheme:"bearer",bearerFormat:"JWT",type:"apiKey",description:"Access token provided after running the oauth flow (and if needed registering/linking)"},api_key:{type:"apiKey",in:"header",name:"sync-api",description:"Secret Text shared between sync services and login service"}},info:{title:"Gropius Login Service",description:"API for login, registration and linking Gropius accounts to accounts on IMSs",version:"1.0.0",contact:{}},postman:{name:"Get one strategy (type)",description:{content:"Gets details for the one specified strategy type",type:"text/plain"},url:{path:["auth","api","login","strategy",":type"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) The strategy type name of the strategy to retrieve",type:"text/plain"},type:"any",value:"",key:"type"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"login-service/gropius-login-service",custom_edit_url:null},f=void 0,b={unversionedId:"login-service/strategies-controller-get-strategy-type-9",id:"login-service/strategies-controller-get-strategy-type-9",title:"Get one strategy (type)",description:"Gets details for the one specified strategy type",source:"@site/rest-docs/login-service/strategies-controller-get-strategy-type-9.api.mdx",sourceDirName:"login-service",slug:"/login-service/strategies-controller-get-strategy-type-9",permalink:"/gropius-docs/rest/login-service/strategies-controller-get-strategy-type-9",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"strategies-controller-get-strategy-type-9",title:"Get one strategy (type)",description:"Gets details for the one specified strategy type",sidebar_label:"Get one strategy (type)",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"StrategiesController_getStrategyType_9",description:"Gets details for the one specified strategy type",parameters:[{name:"type",required:!0,in:"path",description:"The strategy type name of the strategy to retrieve",schema:{type:"string"}}],responses:{200:{description:"If existing, the strategy specified",content:{"application/json":{schema:{type:"object",properties:{typeName:{type:"string",description:"The unique (type) name of the strategy",example:"userpass"},canLoginRegister:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability of logging in users",example:!0},canSync:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability\nof providing api tokens to the a sync service",example:!1},needsRedirectFlow:{type:"boolean",description:"`true` if to authenticate using this strategy, a redirect of the users browser is required\n\n`false` if sending credentials to the token endpoint is enough",example:!1},allowsImplicitSignup:{type:"boolean",description:"`true` iff this strategy allows instances to use implicit signup\nto register users automatically if they don't have an account but tried to login",example:!1},acceptsVariables:{description:"The specification of the data expected in the post body if not using redirect\nand sending the credentials directly to the token endpoint",type:"array",items:{type:"object"}},updateActions:{description:"The actions that can be performed on the strategy instance",type:"array",items:{type:"object"}},instanceConfigSchema:{type:"object",description:"The schema of the instance configuration"}},required:["typeName","canLoginRegister","canSync","needsRedirectFlow","allowsImplicitSignup","acceptsVariables","updateActions","instanceConfigSchema"],title:"GetStrategyResponse"}}}},404:{description:"If no strategy with the specified type name exists"}},tags:["login-api"],method:"get",path:"/auth/api/login/strategy/{type}",servers:[],securitySchemes:{oauth2:{type:"oauth2",flows:{},description:"Access token provided by running the oauth flow (and if needed) registering/linking",bearerFormat:"JWT"},bearer:{scheme:"bearer",bearerFormat:"JWT",type:"apiKey",description:"Access token provided after running the oauth flow (and if needed registering/linking)"},api_key:{type:"apiKey",in:"header",name:"sync-api",description:"Secret Text shared between sync services and login service"}},info:{title:"Gropius Login Service",description:"API for login, registration and linking Gropius accounts to accounts on IMSs",version:"1.0.0",contact:{}},postman:{name:"Get one strategy (type)",description:{content:"Gets details for the one specified strategy type",type:"text/plain"},url:{path:["auth","api","login","strategy",":type"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) The strategy type name of the strategy to retrieve",type:"text/plain"},type:"any",value:"",key:"type"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"login-service/gropius-login-service",custom_edit_url:null},sidebar:"restSidebar",previous:{title:"List all strategies/strategy types",permalink:"/gropius-docs/rest/login-service/strategies-controller-get-all-strategy-types-8"},next:{title:"List all strategy instances (of type)",permalink:"/gropius-docs/rest/login-service/strategy-instances-controller-get-all-strategy-instances-10"}},v={},k=[{value:"Request",id:"request",level:2}],T={toc:k},x="wrapper";function S(e){let{components:t,...i}=e;return(0,s.kt)(x,(0,a.Z)({},T,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{className:"openapi__heading"},"Get one strategy (type)"),(0,s.kt)(o(),{method:"get",path:"/auth/api/login/strategy/{type}",mdxType:"MethodEndpoint"}),(0,s.kt)(c(),{infoPath:"login-service/gropius-login-service",mdxType:"SecuritySchemes"}),(0,s.kt)("p",null,"Gets details for the one specified strategy type"),(0,s.kt)("h2",{id:"request"},"Request"),(0,s.kt)("details",{style:{marginBottom:"1rem"},className:"openapi-markdown__details","data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{}},(0,s.kt)("h3",{className:"openapi-markdown__details-summary-header-params"},"Path Parameters")),(0,s.kt)("div",null,(0,s.kt)("ul",null,(0,s.kt)(d.Z,{className:"paramsItem",param:{name:"type",required:!0,in:"path",description:"The strategy type name of the strategy to retrieve",schema:{type:"string"}},mdxType:"ParamsItem"})))),(0,s.kt)("div",null,(0,s.kt)("div",null,(0,s.kt)(n.Z,{mdxType:"ApiTabs"},(0,s.kt)(h.default,{label:"200",value:"200",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"If existing, the strategy specified")),(0,s.kt)("div",null,(0,s.kt)(l.Z,{className:"openapi-tabs__mime",schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(h.default,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(m.default,{className:"openapi-tabs__schema",mdxType:"SchemaTabs"},(0,s.kt)(h.default,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},className:"openapi-markdown__details response","data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{},className:"openapi-markdown__details-summary-response"},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(g.Z,{collapsible:!1,name:"typeName",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The unique (type) name of the strategy",example:"userpass"},mdxType:"SchemaItem"}),(0,s.kt)(g.Z,{collapsible:!1,name:"canLoginRegister",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability of logging in users",example:!0},mdxType:"SchemaItem"}),(0,s.kt)(g.Z,{collapsible:!1,name:"canSync",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` iff instances of this strategy have the theoretical capability\nof providing api tokens to the a sync service",example:!1},mdxType:"SchemaItem"}),(0,s.kt)(g.Z,{collapsible:!1,name:"needsRedirectFlow",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` if to authenticate using this strategy, a redirect of the users browser is required\n\n`false` if sending credentials to the token endpoint is enough",example:!1},mdxType:"SchemaItem"}),(0,s.kt)(g.Z,{collapsible:!1,name:"allowsImplicitSignup",required:!0,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"`true` iff this strategy allows instances to use implicit signup\nto register users automatically if they don't have an account but tried to login",example:!1},mdxType:"SchemaItem"}),(0,s.kt)(g.Z,{collapsible:!1,name:"acceptsVariables",required:!0,schemaName:"object[]",qualifierMessage:void 0,schema:{description:"The specification of the data expected in the post body if not using redirect\nand sending the credentials directly to the token endpoint",type:"array",items:{type:"object"}},mdxType:"SchemaItem"}),(0,s.kt)(g.Z,{collapsible:!1,name:"updateActions",required:!0,schemaName:"object[]",qualifierMessage:void 0,schema:{description:"The actions that can be performed on the strategy instance",type:"array",items:{type:"object"}},mdxType:"SchemaItem"}),(0,s.kt)(g.Z,{collapsible:!1,name:"instanceConfigSchema",required:!0,schemaName:"object",qualifierMessage:void 0,schema:{type:"object",description:"The schema of the instance configuration"},mdxType:"SchemaItem"})))),(0,s.kt)(h.default,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(y.Z,{responseExample:'{\n  "typeName": "userpass",\n  "canLoginRegister": true,\n  "canSync": false,\n  "needsRedirectFlow": false,\n  "allowsImplicitSignup": false,\n  "acceptsVariables": [\n    {}\n  ],\n  "updateActions": [\n    {}\n  ],\n  "instanceConfigSchema": {}\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,s.kt)(h.default,{label:"404",value:"404",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"If no strategy with the specified type name exists")),(0,s.kt)("div",null))))))}S.isMDXComponent=!0}}]);
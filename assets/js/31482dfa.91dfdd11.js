"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16505],{233854:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var i=n(487462),a=(n(667294),n(603905));const l={id:"index",title:"gropius-login-service-backend",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},o="Login-Service Backend",r={unversionedId:"login-service-api/index",id:"login-service-api/index",title:"gropius-login-service-backend",description:"Description",source:"@site/docs/login-service-api/index.md",sourceDirName:"login-service-api",slug:"/login-service-api/",permalink:"/gropius-docs/login-service-api/",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"index",title:"gropius-login-service-backend",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null}},s={},d=[{value:"Description",id:"description",level:2},{value:"Installation",id:"installation",level:2},{value:"Graphql Model Generation",id:"graphql-model-generation",level:3},{value:"Running the app",id:"running-the-app",level:2},{value:"Debug/Try out",id:"debugtry-out",level:2},{value:"Test",id:"test",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"login-service-backend"},"Login-Service Backend"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Nodejs/Nestjs service that does the user management and authentication for the gropius-backend. It will generate tokens for the user to use to identify against the api"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install\n")),(0,a.kt)("h3",{id:"graphql-model-generation"},"Graphql Model Generation"),(0,a.kt)("p",null,"To generate the needed model types from the graphql schema do the following"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Make sure, the api-internal service is running on ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:8081/graphql")," (or another url)"),(0,a.kt)("li",{parentName:"ol"},"Check that the value of the ",(0,a.kt)("inlineCode",{parentName:"li"},"schema")," field in codegen.yml matches the API endpoint under which the api-internal is running"),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run generate-model")," to generate all needed code")),(0,a.kt)("h2",{id:"running-the-app"},"Running the app"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run build  # Build the sources\n$ npm run init-database  # Run all database migrations to get database to current version\n$ npm run start:prod  # Start the production version of the app\n")),(0,a.kt)("h2",{id:"debugtry-out"},"Debug/Try out"),(0,a.kt)("p",null,"The login service deploys a swagger UI on ",(0,a.kt)("inlineCode",{parentName:"p"},"http://HOSTNAME:3001/login-api-doc#/")," which has some ability to interact with the API"),(0,a.kt)("p",null,"Additionally, for easier and more intuitive debugging and testing of the login API and especially of the OAuth flow etc., an interactive UI is deployed on ",(0,a.kt)("inlineCode",{parentName:"p"},"http://HOSTNAME:3001/login-debug/")),(0,a.kt)("h2",{id:"test"},"Test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n")))}c.isMDXComponent=!0}}]);
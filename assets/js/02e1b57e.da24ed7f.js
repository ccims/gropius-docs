"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23497],{617554:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var a=t(487462),i=(t(667294),t(603905));const l={sidebar_position:3,slug:"/jira-sync"},s="Jira sync",r={unversionedId:"docs/jira",id:"docs/jira",title:"Jira sync",description:"The Jira sync binary runs cycles scheduled with a default value of 10min.",source:"@site/docs/docs/jira.mdx",sourceDirName:"docs",slug:"/jira-sync",permalink:"/gropius-docs/jira-sync",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/jira-sync"},sidebar:"docSidebar",previous:{title:"GitHub sync",permalink:"/gropius-docs/github-sync"},next:{title:"Login Service",permalink:"/gropius-docs/login"}},o={},d=[{value:"Single Execution",id:"single-execution",level:2},{value:"Incoming",id:"incoming",level:3},{value:"Outgoing",id:"outgoing",level:3},{value:"How to use",id:"how-to-use",level:2},{value:"Example:",id:"example",level:3}],p={toc:d},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"jira-sync"},"Jira sync"),(0,i.kt)("p",null,"The Jira sync binary runs cycles scheduled with a default value of 10min.\nCurrently supported are titles, descriptions, comments and labels"),(0,i.kt)("h2",{id:"single-execution"},"Single Execution"),(0,i.kt)("p",null,"Each cycle consists of two parts: Incoming and Outgoing.\nThe incoming phase only syncs data from Jira to gropius while the outgoing phase syncs only from gropius to Jira."),(0,i.kt)("h3",{id:"incoming"},"Incoming"),(0,i.kt)("p",null,"During the Incoming phase the sync first downloads all new events from Jira.\nThese events are immediately added to the MongoDB and the timestamps for the Jira api moved to avoid repeated downloads."),(0,i.kt)("p",null,"After everything has been downloaded, the missing issues are created and all timeline items inserted into the timelines."),(0,i.kt)("h3",{id:"outgoing"},"Outgoing"),(0,i.kt)("p",null,"The outgoing phase collects all new issues and timeline items that have no known Jira id and have not been invalidated (e.g. no reopen after close event).\nThese differences are then collected and prepared for submission to Jira."),(0,i.kt)("p",null,"After all mutations are collected, a final damage control check ensures that the amount of mutations does not exceed a threshold to prevent damage to larger public repositories in case of issues with the sync.\nThen all of the mutations are executed and the ids of the created issues and timeline items added to the MongoDB."),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("p",null,"When the server side is running, the repos which should be synced have to be set.\nTo mark an ",(0,i.kt)("inlineCode",{parentName:"p"},"IMS")," to connect to Jira, the sync service creates the Jira ",(0,i.kt)("inlineCode",{parentName:"p"},"IMSTemplate")," on first run."),(0,i.kt)("p",null,"This can be used to create an ",(0,i.kt)("inlineCode",{parentName:"p"},"IMS"),", which requires:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the id of an ",(0,i.kt)("inlineCode",{parentName:"li"},"IMSUser")," owning the token which is then used to query the issues (",(0,i.kt)("inlineCode",{parentName:"li"},"null")," until an ",(0,i.kt)("inlineCode",{parentName:"li"},"IMSUser")," is created for this ",(0,i.kt)("inlineCode",{parentName:"li"},"IMS"),")"),(0,i.kt)("li",{parentName:"ul"},"and the URL of the REST endpoint of the Jira instance (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"https://<Something>.atlassian.net/rest/api/2")," for the Cloud Jira)\nin the appropriate ",(0,i.kt)("inlineCode",{parentName:"li"},"templatedFields"),".")),(0,i.kt)("p",null,"If using the dev-login-service, the ",(0,i.kt)("inlineCode",{parentName:"p"},"IMSUser")," is not created automatically and has to be created via request to the internal api (should be port 8081) with the mutation ",(0,i.kt)("inlineCode",{parentName:"p"},"createIMSUser"),".\nThe username is meaningless, as every user gets the environmentally set token by the dev-login-service.\nAs this requires the ",(0,i.kt)("inlineCode",{parentName:"p"},"IMS")," to exist this then has to be updated using ",(0,i.kt)("inlineCode",{parentName:"p"},"updateIMS")),(0,i.kt)("p",null,"With the ",(0,i.kt)("inlineCode",{parentName:"p"},"IMS")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Trackable"),", an ",(0,i.kt)("inlineCode",{parentName:"p"},"IMSProject")," can be created. Each one requires the repo as object in the appropriate templated field."),(0,i.kt)("p",null,"These ",(0,i.kt)("inlineCode",{parentName:"p"},"IMSProject"),"s are then synced during each cycle."),(0,i.kt)("h3",{id:"example"},"Example:"),(0,i.kt)("p",null,"For authorization ask the dev login service (http://localhost:3000/) to create an user (lower half) and then generate a token (upper half).\nThe token is returned as pile of dotted base64 as the only content in the side.\nTo use it in the playground (http://localhost:8080/graphiql), you need to paste ",(0,i.kt)("inlineCode",{parentName:"p"},'{"Authorization": "Bearer <Content of second dev-login response>"}')," in the header part usually on the lower left."),(0,i.kt)("p",null,"Ensure the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"JIRA_DUMMY_EMAIL")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"JIRA_DUMMY_TOKEN")," is set to a valid jira token combination"),(0,i.kt)("p",null,"Create Trackable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'mutation {\n  createProject(input: {name: "n", description: "desc"}) {\n    project {\n      id\n    }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createProject": {\n      "project": {\n        "id": "<Trackable ID>"\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Find IMSTemplate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gql"},"query {\n  imsTemplates {\n    nodes {\n      id\n    }\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "imsTemplates": {\n      "nodes": [\n        {\n          "id": "<IMSTemplate ID>"\n        }\n      ]\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Create IMS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gql"},'mutation {\n  createIMS(\n    input: {template: "<IMSTemplate ID>", templatedFields: [\n      {name: "graphql-url", value: "<Some IMSUser>"},\n      {name: "root-url", value: "https://<Something>.atlassian.net/rest/api/2"}\n    ], description: "desc", name: "n"}\n  ) {\n    ims {\n      id\n    }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createIMS": {\n      "ims": {\n        "id": "<IMS ID>"\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Create IMSProject"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gql"},'mutation {\n  createIMSProject(\n    input: {ims: "<IMS ID>", trackable: "<Trackable ID>", templatedFields:\n      [\n        {name: "repo", value: "<Some Jira repo>"},\n        {name: "enable-outgoing", value: true},\n        {name: "enable-outgoing-labels", value: true},\n        {name: "enable-outgoing-comments", value: true},\n        {name: "enable-outgoing-title-changes", value: true},\n        {name: "enable-outgoing-state", value: true},\n      ]\n    }\n  ) {\n    imsProject {\n      id\n    }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createIMSProject": {\n      "imsproject": {\n        "id": "<IMS Project ID>"\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Create IMSUser (warning: Internal API!!! use ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:8081/graphiql")," with dev)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gql"},'mutation {\n  createIMSUser(\n    input: {ims: "<IMS ID>", templatedFields: [], username: "test", displayName: "test"}\n  ) {\n    imsUser {\n      id\n    }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createIMSUser": {\n      "imsuser": {\n        "id": "<IMSUser ID>"\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Update IMS with IMSUser (back in the normal API)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gql"},'mutation {\n  updateIMS(\n    input: {id: "<IMS ID>", templatedFields: {name: "read-user", value: "<IMSUser ID>"}}\n  ) {\n    ims {\n      id\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Execute sync once or twice"),(0,i.kt)("p",null,"See Result with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gql"},"query {\n  projects(first: 100) {\n    nodes {\n      id\n      issues {\n        nodes {\n          id\n          title\n          timelineItems(last: 100) {\n            nodes {\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }\n}\n")))}c.isMDXComponent=!0}}]);
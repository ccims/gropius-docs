"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66655],{299434:(e,t,a)=>{a.r(t),a.d(t,{Badge:()=>m,Bullet:()=>c,Details:()=>p,SpecifiedBy:()=>b,assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>y});var d=a(487462),o=a(667294),n=a(603905);const l={id:"body",title:"Body",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null},s=void 0,i={unversionedId:"graphql/api-public/objects/body",id:"graphql/api-public/objects/body",title:"Body",description:"Main Body of an Issue.",source:"@site/docs/graphql/api-public/objects/body.mdx",sourceDirName:"graphql/api-public/objects",slug:"/graphql/api-public/objects/body",permalink:"/gropius-docs/graphql/api-public/objects/body",draft:!1,tags:[],version:"current",frontMatter:{id:"body",title:"Body",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null},sidebar:"graphqlSidebar"},r={},c=()=>(0,n.kt)(o.Fragment,null,(0,n.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),b=e=>(0,n.kt)(o.Fragment,null,"Specification",(0,n.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),m=e=>(0,n.kt)(o.Fragment,null,(0,n.kt)("span",{className:e.class},e.text)),y=[{value:"Fields",id:"fields",level:3},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>answeredBy</b></code><Bullet /><code>IssueCommentConnection!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="object"/>',id:"code-style-fontweight-normal-bodybansweredbybcodeissuecommentconnection--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.answeredBy.<b>before</b></code><Bullet /><code>String</code> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodyansweredbybbeforebcodestring-",level:5},{value:'<code style={{ fontWeight: \'normal\' }}>Body.answeredBy.<b>filter</b></code><Bullet /><code>IssueCommentFilterInput</code> <Badge class="badge badge--secondary" text="input"/>',id:"code-style-fontweight-normal-bodyansweredbybfilterbcodeissuecommentfilterinput-",level:5},{value:'<code style={{ fontWeight: \'normal\' }}>Body.answeredBy.<b>first</b></code><Bullet /><code>Int</code> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodyansweredbybfirstbcodeint-",level:5},{value:'<code style={{ fontWeight: \'normal\' }}>Body.answeredBy.<b>last</b></code><Bullet /><code>Int</code> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodyansweredbyblastbcodeint-",level:5},{value:'<code style={{ fontWeight: \'normal\' }}>Body.answeredBy.<b>orderBy</b></code><Bullet /><code>[IssueCommentOrder!]</code> <Badge class="badge badge--secondary" text="list"/> <Badge class="badge badge--secondary" text="input"/>',id:"code-style-fontweight-normal-bodyansweredbyborderbybcodeissuecommentorder--",level:5},{value:'<code style={{ fontWeight: \'normal\' }}>Body.answeredBy.<b>skip</b></code><Bullet /><code>Int</code> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodyansweredbybskipbcodeint-",level:5},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>body</b></code><Bullet /><code>String!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodybbodybcodestring--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>bodyLastEditedAt</b></code><Bullet /><code>DateTime!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodybbodylasteditedatbcodedatetime--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>bodyLastEditedBy</b></code><Bullet /><code>User!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="interface"/>',id:"code-style-fontweight-normal-bodybbodylasteditedbybcodeuser--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>createdAt</b></code><Bullet /><code>DateTime!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodybcreatedatbcodedatetime--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>createdBy</b></code><Bullet /><code>User!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="interface"/>',id:"code-style-fontweight-normal-bodybcreatedbybcodeuser--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>hasPermission</b></code><Bullet /><code>Boolean!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodybhaspermissionbcodeboolean--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>id</b></code><Bullet /><code>ID!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodybidbcodeid--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>issue</b></code><Bullet /><code>Issue</code> <Badge class="badge badge--secondary" text="object"/>',id:"code-style-fontweight-normal-bodybissuebcodeissue-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>lastModifiedAt</b></code><Bullet /><code>DateTime!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="scalar"/>',id:"code-style-fontweight-normal-bodyblastmodifiedatbcodedatetime--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>lastModifiedBy</b></code><Bullet /><code>User!</code> <Badge class="badge badge--secondary" text="non-null"/> <Badge class="badge badge--secondary" text="interface"/>',id:"code-style-fontweight-normal-bodyblastmodifiedbybcodeuser--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>Body.<b>parentItem</b></code><Bullet /><code>ParentTimelineItem</code> <Badge class="badge badge--secondary" text="interface"/>',id:"code-style-fontweight-normal-bodybparentitembcodeparenttimelineitem-",level:4},{value:"Interfaces",id:"interfaces",level:3},{value:'<code>AuditedNode</code> <Badge class="badge badge--secondary" text="interface"/>',id:"auditednode-",level:4},{value:'<code>BaseNode</code> <Badge class="badge badge--secondary" text="interface"/>',id:"basenode-",level:4},{value:'<code>Comment</code> <Badge class="badge badge--secondary" text="interface"/>',id:"comment-",level:4},{value:'<code>Node</code> <Badge class="badge badge--secondary" text="interface"/>',id:"node-",level:4},{value:'<code>TimelineItem</code> <Badge class="badge badge--secondary" text="interface"/>',id:"timelineitem-",level:4},{value:"Member of",id:"member-of",level:3},{value:"Implemented by",id:"implemented-by",level:3}],p=e=>{let{dataOpen:t,dataClose:a,children:l,startOpen:s=!1}=e;const[i,r]=(0,o.useState)(s);return(0,n.kt)("details",(0,d.Z)({},i?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,n.kt)("summary",{onClick:e=>{e.preventDefault(),r((e=>!e))},style:{listStyle:"none"}},i?t:a),i&&l)},g={Bullet:c,SpecifiedBy:b,Badge:m,toc:y,Details:p},k="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(k,(0,d.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Main Body of an Issue.\nEach Issue has exactly one Body. Keeps track when it was last edited and by who, but does not keep track of the change history.\nREAD is granted if READ is granted on ",(0,n.kt)("inlineCode",{parentName:"p"},"issue"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql"},"type Body implements AuditedNode, BaseNode, Comment, Node, TimelineItem {\n  answeredBy(\n    after: String\n    before: String\n    filter: IssueCommentFilterInput\n    first: Int\n    last: Int\n    orderBy: [IssueCommentOrder!]\n    skip: Int\n  ): IssueCommentConnection!\n  body: String!\n  bodyLastEditedAt: DateTime!\n  bodyLastEditedBy: User!\n  createdAt: DateTime!\n  createdBy: User!\n  hasPermission(\n    permission: AllPermissionEntry\n  ): Boolean!\n  id: ID!\n  issue: Issue\n  lastModifiedAt: DateTime!\n  lastModifiedBy: User!\n  parentItem: ParentTimelineItem\n}\n")),(0,n.kt)("h3",{id:"fields"},"Fields"),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybansweredbybcodeissuecommentconnection--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"answeredBy"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/objects/issue-comment-connection"},(0,n.kt)("inlineCode",{parentName:"a"},"IssueCommentConnection!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"object",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"IssueComments which answer this Comment."),(0,n.kt)("h5",{parentName:"blockquote",id:"code-style-fontweight-normal-bodyansweredbybafterbcodestring-"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.answeredBy.",(0,n.kt)("b",null,"after"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/scalars/string"},(0,n.kt)("inlineCode",{parentName:"a"},"String"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("p",{parentName:"blockquote"},"Get only items after the cursor")),(0,n.kt)("h5",{id:"code-style-fontweight-normal-bodyansweredbybbeforebcodestring-"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.answeredBy.",(0,n.kt)("b",null,"before"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/scalars/string"},(0,n.kt)("inlineCode",{parentName:"a"},"String"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Get only items before the cursor")),(0,n.kt)("h5",{id:"code-style-fontweight-normal-bodyansweredbybfilterbcodeissuecommentfilterinput-"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.answeredBy.",(0,n.kt)("b",null,"filter"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/inputs/issue-comment-filter-input"},(0,n.kt)("inlineCode",{parentName:"a"},"IssueCommentFilterInput"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"input",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Filter for specific items in the connection")),(0,n.kt)("h5",{id:"code-style-fontweight-normal-bodyansweredbybfirstbcodeint-"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.answeredBy.",(0,n.kt)("b",null,"first"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/scalars/int"},(0,n.kt)("inlineCode",{parentName:"a"},"Int"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Get the first n items. Must not be used if before is specified")),(0,n.kt)("h5",{id:"code-style-fontweight-normal-bodyansweredbyblastbcodeint-"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.answeredBy.",(0,n.kt)("b",null,"last"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/scalars/int"},(0,n.kt)("inlineCode",{parentName:"a"},"Int"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Get the last n items. Must not be used if after is specified")),(0,n.kt)("h5",{id:"code-style-fontweight-normal-bodyansweredbyborderbybcodeissuecommentorder--"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.answeredBy.",(0,n.kt)("b",null,"orderBy"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/inputs/issue-comment-order"},(0,n.kt)("inlineCode",{parentName:"a"},"[IssueCommentOrder!]"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"list",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"input",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Order in which the items are sorted")),(0,n.kt)("h5",{id:"code-style-fontweight-normal-bodyansweredbybskipbcodeint-"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.answeredBy.",(0,n.kt)("b",null,"skip"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/scalars/int"},(0,n.kt)("inlineCode",{parentName:"a"},"Int"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Skips n items. First or last MUST be specified, is otherwise ignored")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybbodybcodestring--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"body"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/scalars/string"},(0,n.kt)("inlineCode",{parentName:"a"},"String!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The text of the Comment.\nSupports GFM (GitHub Flavored Markdown).\nUpdates cause lastEditedAt and lastEditedBy to change.\nEmpty String if IssueComment is deleted.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybbodylasteditedatbcodedatetime--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"bodyLastEditedAt"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/scalars/date-time"},(0,n.kt)("inlineCode",{parentName:"a"},"DateTime!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Keep track when the body of the Comment was last updated.\nIf not updated yet, the DateTime of creation.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybbodylasteditedbybcodeuser--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"bodyLastEditedBy"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/user"},(0,n.kt)("inlineCode",{parentName:"a"},"User!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The User who last edited the body of this Comment.\nIf not edited yet, the creator of the Comment.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybcreatedatbcodedatetime--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"createdAt"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/scalars/date-time"},(0,n.kt)("inlineCode",{parentName:"a"},"DateTime!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The DateTime this entity was created at.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybcreatedbybcodeuser--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"createdBy"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/user"},(0,n.kt)("inlineCode",{parentName:"a"},"User!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The User who created this entity.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybhaspermissionbcodeboolean--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"hasPermission"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/scalars/boolean"},(0,n.kt)("inlineCode",{parentName:"a"},"Boolean!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Checks if the current user has a specific permission on this Node"),(0,n.kt)("h5",{parentName:"blockquote",id:"code-style-fontweight-normal-bodyhaspermissionbpermissionbcodeallpermissionentry-"},(0,n.kt)("a",{parentName:"h5",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.hasPermission.",(0,n.kt)("b",null,"permission"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h5",href:"/graphql/api-public/enums/all-permission-entry"},(0,n.kt)("inlineCode",{parentName:"a"},"AllPermissionEntry"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"enum",mdxType:"Badge"})),(0,n.kt)("p",{parentName:"blockquote"},"The permission to check for")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybidbcodeid--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"id"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/scalars/id"},(0,n.kt)("inlineCode",{parentName:"a"},"ID!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The unique id of this node")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybissuebcodeissue-"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"issue"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/objects/issue"},(0,n.kt)("inlineCode",{parentName:"a"},"Issue"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"object",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The Issue this TimelineItem is part of.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodyblastmodifiedatbcodedatetime--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"lastModifiedAt"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/scalars/date-time"},(0,n.kt)("inlineCode",{parentName:"a"},"DateTime!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The DateTime this entity was last modified at.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodyblastmodifiedbybcodeuser--"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"lastModifiedBy"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/user"},(0,n.kt)("inlineCode",{parentName:"a"},"User!"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"non-null",mdxType:"Badge"})," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The User who last modified this entity.")),(0,n.kt)("h4",{id:"code-style-fontweight-normal-bodybparentitembcodeparenttimelineitem-"},(0,n.kt)("a",{parentName:"h4",href:"#"},(0,n.kt)("code",{style:{fontWeight:"normal"}},"Body.",(0,n.kt)("b",null,"parentItem"))),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/parent-timeline-item"},(0,n.kt)("inlineCode",{parentName:"a"},"ParentTimelineItem"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"If existing, the parent TimelineItem")),(0,n.kt)("h3",{id:"interfaces"},"Interfaces"),(0,n.kt)("h4",{id:"auditednode-"},(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/audited-node"},(0,n.kt)("inlineCode",{parentName:"a"},"AuditedNode"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Node which provides auditing information, which can e.g. be used for the sync.\nWhen it was created and last modified, if the it is already deleted, and by who it was created and last modified.\nA modification is any change of a field on the node itself and a change of a relation (add or removed).\nA change on a related related node is not a modification.")),(0,n.kt)("h4",{id:"basenode-"},(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/base-node"},(0,n.kt)("inlineCode",{parentName:"a"},"BaseNode"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Shared extensions to the node type.")),(0,n.kt)("h4",{id:"comment-"},(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/comment"},(0,n.kt)("inlineCode",{parentName:"a"},"Comment"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Supertype for IssueComment and Body.\nRepresents a text block in the Timeline.\nKeeps track when it was last edited and by who, but does not keep track of the change history.\nREAD is granted if READ is granted on ",(0,n.kt)("inlineCode",{parentName:"p"},"issue"),".")),(0,n.kt)("h4",{id:"node-"},(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/node"},(0,n.kt)("inlineCode",{parentName:"a"},"Node"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Base class of all nodes")),(0,n.kt)("h4",{id:"timelineitem-"},(0,n.kt)("a",{parentName:"h4",href:"/graphql/api-public/interfaces/timeline-item"},(0,n.kt)("inlineCode",{parentName:"a"},"TimelineItem"))," ",(0,n.kt)(m,{class:"badge badge--secondary",text:"interface",mdxType:"Badge"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Supertype of all timeline items. Always part of an Issue.")),(0,n.kt)("h3",{id:"member-of"},"Member of"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/graphql/api-public/objects/issue"},(0,n.kt)("inlineCode",{parentName:"a"},"Issue")),"  ",(0,n.kt)(m,{class:"badge badge--secondary",text:"object",mdxType:"Badge"}),(0,n.kt)(c,{mdxType:"Bullet"}),(0,n.kt)("a",{parentName:"p",href:"/graphql/api-public/objects/update-body-payload"},(0,n.kt)("inlineCode",{parentName:"a"},"UpdateBodyPayload")),"  ",(0,n.kt)(m,{class:"badge badge--secondary",text:"object",mdxType:"Badge"})),(0,n.kt)("h3",{id:"implemented-by"},"Implemented by"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/graphql/api-public/unions/public-timeline-item"},(0,n.kt)("inlineCode",{parentName:"a"},"PublicTimelineItem")),"  ",(0,n.kt)(m,{class:"badge badge--secondary",text:"union",mdxType:"Badge"})))}u.isMDXComponent=!0}}]);
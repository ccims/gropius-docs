"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[34005],{283777:(e,t,a)=>{a.r(t),a.d(t,{Badge:()=>c,Bullet:()=>d,Details:()=>k,SpecifiedBy:()=>u,assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>o,toc:()=>g});var s=a(487462),n=a(667294),i=a(603905);const r={id:"gropius-user-ids",title:"gropiusUserIds",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null},l=void 0,o={unversionedId:"graphql/api-internal/queries/gropius-user-ids",id:"graphql/api-internal/queries/gropius-user-ids",title:"gropiusUserIds",description:"Get the IDs of all existing Gropius Users",source:"@site/docs/graphql/api-internal/queries/gropius-user-ids.mdx",sourceDirName:"graphql/api-internal/queries",slug:"/graphql/api-internal/queries/gropius-user-ids",permalink:"/gropius-docs/graphql/api-internal/queries/gropius-user-ids",draft:!1,tags:[],version:"current",frontMatter:{id:"gropius-user-ids",title:"gropiusUserIds",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null},sidebar:"graphqlSidebar"},p={},d=()=>(0,i.kt)(n.Fragment,null,(0,i.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),u=e=>(0,i.kt)(n.Fragment,null,"Specification",(0,i.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),c=e=>(0,i.kt)(n.Fragment,null,(0,i.kt)("span",{className:e.class},e.text)),g=[{value:"Type",id:"type",level:3},{value:'<code>ID</code> <Badge class="badge badge--secondary" text="scalar"/>',id:"id-",level:4}],k=e=>{let{dataOpen:t,dataClose:a,children:r,startOpen:l=!1}=e;const[o,p]=(0,n.useState)(l);return(0,i.kt)("details",(0,s.Z)({},o?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,i.kt)("summary",{onClick:e=>{e.preventDefault(),p((e=>!e))},style:{listStyle:"none"}},o?t:a),o&&r)},h={Bullet:d,SpecifiedBy:u,Badge:c,toc:g,Details:k},m="wrapper";function f(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,s.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Get the IDs of all existing Gropius Users"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"gropiusUserIds: [ID!]!\n")),(0,i.kt)("h3",{id:"type"},"Type"),(0,i.kt)("h4",{id:"id-"},(0,i.kt)("a",{parentName:"h4",href:"/graphql/api-internal/scalars/id"},(0,i.kt)("inlineCode",{parentName:"a"},"ID"))," ",(0,i.kt)(c,{class:"badge badge--secondary",text:"scalar",mdxType:"Badge"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ID")," scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as ",(0,i.kt)("inlineCode",{parentName:"p"},'"4"'),") or integer (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"4"),") input value will be accepted as an ID.")))}f.isMDXComponent=!0}}]);